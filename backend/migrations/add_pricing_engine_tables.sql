-- ========================================
-- Pricing Engine Database Tables
-- ========================================
-- Creates three core tables for the Hybrid Pricing Engine:
--   1. pricing_quotes - Records every price quote shown
--   2. pricing_outcomes - Tracks actual booking results for quotes
--   3. inventory_snapshots - Stores capacity/availability snapshots
--
-- Also adds capacity_config to business_settings for fallback
-- and creates helpful indexes on existing pricing_data table
-- ========================================

-- ========================================
-- 1. PRICING QUOTES TABLE
-- ========================================
-- Records every price quote shown to users/systems
-- Links to user and property for proper isolation

CREATE TABLE IF NOT EXISTS pricing_quotes (
  quote_id TEXT PRIMARY KEY,
  userId UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  propertyId UUID NOT NULL REFERENCES properties(id) ON DELETE CASCADE,
  created_at TIMESTAMP NOT NULL DEFAULT NOW(),
  stay_date DATE NOT NULL,
  lead_days INT NOT NULL,
  product_type TEXT NOT NULL,
  refundable BOOLEAN NOT NULL,
  los INT NOT NULL,
  price_offered NUMERIC NOT NULL,
  inventory_remaining INT,
  inventory_capacity INT,
  season TEXT,
  dow INT,
  comp_p10 NUMERIC,
  comp_p50 NUMERIC,
  comp_p90 NUMERIC,
  weather_tmax NUMERIC,
  weather_rain_mm NUMERIC,
  toggles_hash TEXT,
  shown_to_user_bool BOOLEAN DEFAULT TRUE
);

-- Enable Row Level Security
ALTER TABLE pricing_quotes ENABLE ROW LEVEL SECURITY;

-- Indexes for performance
CREATE INDEX IF NOT EXISTS idx_pricing_quotes_user ON pricing_quotes(userId);
CREATE INDEX IF NOT EXISTS idx_pricing_quotes_property_date ON pricing_quotes(propertyId, stay_date);

-- Add helpful comments
COMMENT ON TABLE pricing_quotes IS 'Records every price quote generated by the pricing engine';
COMMENT ON COLUMN pricing_quotes.lead_days IS 'Days between quote time and stay date';
COMMENT ON COLUMN pricing_quotes.toggles_hash IS 'SHA1 hash of pricing strategy toggles for caching';

-- ========================================
-- 2. PRICING OUTCOMES TABLE
-- ========================================
-- Tracks what actually happened with each quote
-- Used for learning and model improvement

CREATE TABLE IF NOT EXISTS pricing_outcomes (
  quote_id TEXT PRIMARY KEY REFERENCES pricing_quotes(quote_id) ON DELETE CASCADE,
  userId UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  booked_bool BOOLEAN NOT NULL,
  booking_time TIMESTAMP,
  cancelled_bool BOOLEAN,
  revenue_realized NUMERIC,
  no_show_bool BOOLEAN
);

-- Enable Row Level Security
ALTER TABLE pricing_outcomes ENABLE ROW LEVEL SECURITY;

-- Indexes for performance
CREATE INDEX IF NOT EXISTS idx_pricing_outcomes_user ON pricing_outcomes(userId);
CREATE INDEX IF NOT EXISTS idx_pricing_outcomes_booked ON pricing_outcomes(booked_bool);

-- Add helpful comments
COMMENT ON TABLE pricing_outcomes IS 'Tracks booking outcomes for pricing quotes to enable ML learning';
COMMENT ON COLUMN pricing_outcomes.revenue_realized IS 'Actual revenue earned (may differ from quote if upgraded/discounted)';

-- ========================================
-- 3. INVENTORY SNAPSHOTS TABLE
-- ========================================
-- Stores point-in-time capacity and availability
-- Preferred over static capacity_config for dynamic pricing

CREATE TABLE IF NOT EXISTS inventory_snapshots (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  userId UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  propertyId UUID NOT NULL REFERENCES properties(id) ON DELETE CASCADE,
  stay_date DATE NOT NULL,
  product_type TEXT NOT NULL,
  capacity INT NOT NULL,
  remaining INT NOT NULL,
  captured_at TIMESTAMP NOT NULL DEFAULT NOW()
);

-- Enable Row Level Security
ALTER TABLE inventory_snapshots ENABLE ROW LEVEL SECURITY;

-- Indexes for performance
CREATE INDEX IF NOT EXISTS idx_inventory_snapshots_user ON inventory_snapshots(userId);
CREATE INDEX IF NOT EXISTS idx_inventory_snapshots_composite ON inventory_snapshots(propertyId, stay_date, product_type);

-- Add helpful comments
COMMENT ON TABLE inventory_snapshots IS 'Point-in-time snapshots of inventory capacity and availability';
COMMENT ON COLUMN inventory_snapshots.capacity IS 'Total capacity for this product type on this date';
COMMENT ON COLUMN inventory_snapshots.remaining IS 'Remaining availability at capture time';

-- ========================================
-- 4. BUSINESS SETTINGS EXTENSION
-- ========================================
-- Add fallback capacity configuration to business_settings
-- Used when inventory_snapshots are not available

ALTER TABLE business_settings
  ADD COLUMN IF NOT EXISTS capacity_config JSONB;

COMMENT ON COLUMN business_settings.capacity_config IS 'Fallback capacity by product type (e.g., {"standard": 50, "premium": 10})';

-- ========================================
-- 5. PRICING DATA INDEXES
-- ========================================
-- Add helpful indexes to existing pricing_data table
-- for faster pricing engine queries

CREATE INDEX IF NOT EXISTS idx_pricing_data_property_date ON pricing_data(propertyId, date);
CREATE INDEX IF NOT EXISTS idx_pricing_data_date ON pricing_data(date);

-- ========================================
-- 6. ROW LEVEL SECURITY POLICIES
-- ========================================
-- Conservative RLS policies - application also filters by userId

-- Pricing Quotes Policies
CREATE POLICY "select_own_quotes" ON pricing_quotes FOR SELECT USING (auth.uid() = "userId");
CREATE POLICY "insert_own_quotes" ON pricing_quotes FOR INSERT WITH CHECK (auth.uid() = "userId");

-- Pricing Outcomes Policies
CREATE POLICY "select_own_outcomes" ON pricing_outcomes FOR SELECT USING (auth.uid() = "userId");
CREATE POLICY "insert_own_outcomes" ON pricing_outcomes FOR INSERT WITH CHECK (auth.uid() = "userId");

-- Inventory Snapshots Policies
CREATE POLICY "select_own_inventory" ON inventory_snapshots FOR SELECT USING (auth.uid() = "userId");
CREATE POLICY "insert_own_inventory" ON inventory_snapshots FOR INSERT WITH CHECK (auth.uid() = "userId");

-- ========================================
-- Migration Complete
-- ========================================
-- Next steps:
--   1. Run this migration via Supabase dashboard or CLI
--   2. Verify tables exist: SELECT tablename FROM pg_tables WHERE schemaname = 'public';
--   3. Verify indexes: SELECT indexname FROM pg_indexes WHERE schemaname = 'public';
-- ========================================
